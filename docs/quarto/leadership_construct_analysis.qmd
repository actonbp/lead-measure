---
title: "Leadership Construct Analysis Using Embeddings"
author: "Your Name"
date: today
format:
  html:
    toc: true
    code-fold: true
    theme: cosmo
    fig-width: 10
    fig-height: 8
execute:
  echo: true
  warning: false
---

```{python}
#| label: setup
#| include: false

import sys
import os
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import json
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.manifold import TSNE
import umap

# Configure paths to project directories
PROJECT_ROOT = Path("..").resolve().parents[0]
DATA_DIR = PROJECT_ROOT / "data"
EMBEDDINGS_DIR = DATA_DIR / "processed" / "embeddings"
```

## Introduction

This document analyzes leadership measurement scales using embedding-based approaches. The key question we're addressing is:

> How semantically similar are different leadership constructs based on the language used in their measurement items?

Leadership research has seen a proliferation of constructs (ethical leadership, abusive leadership, transformational leadership, etc.) with potential redundancy. Traditional psychometric approaches have limitations in detecting semantic similarities between these measures. This analysis leverages natural language processing and embedding models to provide new insights into construct relationships.

## Data

For this analysis, we use the following leadership measures:

```{python}
#| label: data-description

# This will be replaced with actual code to load and describe your data
# For demonstration purposes, we'll create a placeholder dataframe
measures = pd.DataFrame({
    "Construct": ["Ethical Leadership", "Transformational Leadership", "Servant Leadership", 
                  "Authentic Leadership", "Abusive Leadership"],
    "Items": [10, 20, 28, 16, 15],
    "Source": ["Brown et al. (2005)", "Bass & Avolio (1995)", 
               "van Dierendonck & Nuijten (2011)", "Walumbwa et al. (2008)", 
               "Tepper (2000)"]
})

measures
```

## Embedding Generation

We used multiple embedding models to convert leadership scale items into numerical vectors that capture their semantic meaning:

```{python}
#| label: embedding-description

# Replace with actual embedding details
embedding_models = pd.DataFrame({
    "Model": ["OpenAI Ada-002", "all-mpnet-base-v2", "Llama-2-7b"],
    "Dimensions": [1536, 768, 4096],
    "Type": ["API-based", "Local (SentenceTransformers)", "Local (fine-tuned)"]
})

embedding_models
```

## Semantic Similarity Analysis

### Item-Level Similarity

First, we examine the semantic similarity between individual measurement items:

```{python}
#| label: item-similarity
#| fig-cap: "Heatmap of item-level semantic similarities"

# Example visualization - replace with actual analysis
# Generate random similarity matrix for demonstration
np.random.seed(42)
n_items = 20
item_labels = [f"Item {i+1}" for i in range(n_items)]
item_similarities = np.random.rand(n_items, n_items)
np.fill_diagonal(item_similarities, 1)  # Set diagonal to 1
item_similarities = (item_similarities + item_similarities.T) / 2  # Make symmetric

# Create heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(
    item_similarities,
    cmap="YlGnBu",
    vmin=0,
    vmax=1,
    xticklabels=item_labels,
    yticklabels=item_labels,
    square=True,
)
plt.title("Semantic Similarity Between Leadership Items (Example)", fontsize=16)
plt.tight_layout()
```

### Construct-Level Similarity

Next, we aggregate item-level similarities to examine relationships between leadership constructs:

```{python}
#| label: construct-similarity
#| fig-cap: "Heatmap of construct-level semantic similarities"

# Example visualization - replace with actual analysis
constructs = ["Ethical", "Transformational", "Servant", "Authentic", "Abusive"]
n_constructs = len(constructs)

# Generate random similarity matrix for constructs
np.random.seed(42)
construct_similarities = np.random.rand(n_constructs, n_constructs) * 0.5 + 0.5
np.fill_diagonal(construct_similarities, 1)  # Set diagonal to 1
construct_similarities = (construct_similarities + construct_similarities.T) / 2  # Make symmetric

# Create mask for upper triangle
mask = np.triu(np.ones_like(construct_similarities, dtype=bool))

# Create heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(
    construct_similarities,
    mask=mask,
    cmap="YlGnBu",
    vmin=0,
    vmax=1,
    annot=True,
    fmt=".2f",
    xticklabels=constructs,
    yticklabels=constructs,
    square=True,
)
plt.title("Semantic Similarity Between Leadership Constructs (Example)", fontsize=16)
plt.tight_layout()
```

### Embedding Space Visualization

We can visualize the relationships between leadership items in the embedding space:

```{python}
#| label: embedding-visualization
#| fig-cap: "Leadership items in embedding space (t-SNE projection)"

# Example visualization - replace with actual analysis
np.random.seed(42)
n_items = 50
n_constructs = 5
constructs = ["Ethical", "Transformational", "Servant", "Authentic", "Abusive"]

# Generate random 2D points for demonstration
points = np.random.randn(n_items, 2)
labels = np.random.choice(constructs, n_items)

# Create dataframe for plotting
plot_df = pd.DataFrame({
    "x": points[:, 0],
    "y": points[:, 1],
    "construct": labels
})

# Create plot
plt.figure(figsize=(12, 10))
sns.scatterplot(
    data=plot_df,
    x="x",
    y="y",
    hue="construct",
    palette="Set1",
    alpha=0.7,
    s=100
)
plt.title("Leadership Items in Embedding Space (Example t-SNE projection)", fontsize=16)
plt.xlabel("t-SNE Dimension 1", fontsize=12)
plt.ylabel("t-SNE Dimension 2", fontsize=12)
plt.tight_layout()
```

## Findings and Implications

Based on our analysis of semantic similarities between leadership constructs:

1. **Construct Redundancy**: We observe substantial semantic overlap between certain leadership constructs, specifically:
   - Ethical leadership and Authentic leadership share high semantic similarity
   - Transformational and Servant leadership show moderate overlap

2. **Distinct Constructs**: Some constructs appear semantically distinct, particularly:
   - Abusive leadership shows low similarity with positive leadership constructs
   - [Other findings...]

3. **Methodological Implications**: This embedding-based approach offers several advantages over traditional correlation-based methods:
   - Captures semantic meaning beyond statistical covariance
   - Less dependent on common method variance
   - Can analyze constructs without requiring empirical data collection

## Conclusions

This analysis demonstrates how embedding-based approaches can provide new insights into the relationships between leadership constructs. The semantic similarities revealed through this method help identify potential redundancies in leadership measures and can guide more parsimonious theory development.

Future work should:
1. Expand the analysis to include more leadership constructs
2. Compare results across different embedding models
3. Validate findings against traditional psychometric approaches

## References

Brown, M. E., Trevi√±o, L. K., & Harrison, D. A. (2005). Ethical leadership: A social learning perspective for construct development and testing. *Organizational Behavior and Human Decision Processes, 97*(2), 117-134.

Bass, B. M., & Avolio, B. J. (1995). *MLQ Multifactor Leadership Questionnaire*. Mind Garden.

[Additional references...] 